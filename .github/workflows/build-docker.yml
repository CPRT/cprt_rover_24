name: Docker CI/CD Multi-Arch

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: cprtsoftware/rover

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_NAME: ${{ env.IMAGE_NAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

  build-amd64:
    runs-on: ubuntu-latest
    needs: setup
    env:
      IMAGE_NAME: ${{ needs.setup.outputs.IMAGE_NAME }}
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push amd64 (with registry cache)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          build-args: |
            BASE_IMAGE=ubuntu:22.04
            TARGETARCH=amd64
          tags: |
            ${{ env.IMAGE_NAME }}:amd64
            ${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:amd64-cache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:amd64-cache,mode=max
          provenance: false

  build-arm64:
    runs-on: ubuntu-latest
    needs: setup
    env:
      IMAGE_NAME: ${{ needs.setup.outputs.IMAGE_NAME }}
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (for arm emulation)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push arm64 (with registry cache)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: true
          build-args: |
            BASE_IMAGE=nvcr.io/nvidia/l4t-jetpack:r36.4.0
            TARGETARCH=arm64
          tags: |
            ${{ env.IMAGE_NAME }}:arm64
            ${{ env.IMAGE_NAME }}:${{ github.sha }}-arm64
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:arm64-cache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:arm64-cache,mode=max
          provenance: false

  push-manifest:
    runs-on: ubuntu-latest
    needs: [build-amd64, build-arm64, setup]
    env:
      IMAGE_NAME: ${{ needs.setup.outputs.IMAGE_NAME }}
    steps:
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest (latest + commit)
        run: |
          AMD64_DIGEST="${{ needs.build-amd64.outputs.digest }}"
          ARM64_DIGEST="${{ needs.build-arm64.outputs.digest }}"

          docker buildx imagetools create \
            -t "$IMAGE_NAME:latest" \
            -t "$IMAGE_NAME:${{ github.sha }}" \
            "$IMAGE_NAME@${AMD64_DIGEST}" \
            "$IMAGE_NAME@${ARM64_DIGEST}"
